<?php

/**
 * @file
 * Module hooks and functions for the Form Frame module.
 */

/**
 * Implements hook_hook_info().
 */
function formframe_hook_info() {
  return array(
    'formframe_prebuild_alter' => array('group' => 'formframe'),
    'formframe_prerender_alter' => array('group' => 'formframe'),
    'formframe_parameters' => array('group' => 'formframe'),
    'formframe_parameters_alter' => array('group' => 'formframe'),
  );
}

/**
 * Implements hook_menu().
 */
function formframe_menu() {
  $menu = array();

  $menu['admin/structure/form-frames/settings'] = array(
    'title' => 'Global settings',
    'description' => 'Make global form frame configurations',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('formframe_global_admin'),
    'file' => 'formframe.admin.inc',
    'access arguments' => array('administer form frame'),
  );

  // Pretty much just exists because contextual links are crazy / weird.
  $menu['admin/structure/form-frames/embed/%'] = array(
    'title' => 'Embed this form as an iframe',
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
    'page callback' => 'formframe_redirect_to_embed_page',
    'page arguments' => array(4),
    'access arguments' => array('generate form frame codes'),
  );

  $menu['form/frame/loader.js'] = array(
    'title' => 'Form frame JavaScript loader',
    'type' => MENU_CALLBACK,
    'page callback' => 'formframe_js_loader',
    'page arguments' => array(),
    'file' => 'formframe.loader.inc',
    'access callback' => TRUE,
  );

  foreach (formframe_get_forms() as $path_part => $config) {
    $menu['form/frame/' . $path_part] = array(
      'title' => $config->title,
      'type' => MENU_CALLBACK,
      'page callback' => 'formframe_drupal_get_form',
      'page arguments' => array($config->form),
      'access callback' => TRUE,
      'delivery callback' => 'formframe_deliver_html_page',
    );
  }

  return $menu;
}

/**
 * Implements hook_permission().
 */
function formframe_permission() {
  return array(
    'administer form frame' => array(
      'title' => t('Administer form frame'),
      'description' => t('Add new form frames and edit global configurations'),
      'restrict access' => TRUE,
    ),
    'generate form frame codes' => array(
      'title' => t('Generate form frame embeds'),
      'description' => t('Allows users to generate and copy form frame embed codes'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function formframe_theme() {
  $registry['formframe'] = array(
    'variables' => array(
      'form' => array(),
      'styles' => '',
      'scripts' => '',
      'head' => '',
      'head_title' => '',
    ),
    'template' => 'formframe',
    'path' => drupal_get_path('module', 'formframe') . '/theme',
  );

  return $registry;
}

/**
 * Implements hook_library().
 */
function formframe_library() {
  return array(
    'framecomm' => array(
      'title' => 'Frame communications',
      'version' => '1.0.0',
      'js' => array(
        drupal_get_path('module', 'formframe') . '/js/framecomm.js' => array(),
      ),
      'dependencies' => array(
        array('system', 'jquery.bbq'),
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function formframe_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type === 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Primary page callback for form frames; basically a wrapper around the core
 * drupal_get_form() function.
 *
 * @see formframe_menu()
 * @see drupal_get_form()
 */
function formframe_drupal_get_form($form_id) {
  // Suppress the admin menu.
  if (function_exists('admin_menu_suppress')) {
    admin_menu_suppress();
  }

  $form_state = array();

  $args = func_get_args();
  // Remove $form_id from the arguments.
  array_shift($args);
  $form_state['build_info']['args'] = $args;

  // Attach the form frame configuration in the build info.
  $form_state['build_info']['formframe'] = formframe_get_form(arg(2));

  // Allow other modules to alter this config before the form is built.
  drupal_alter('formframe_prebuild', $form_id, $form_state);

  return drupal_build_form($form_id, $form_state);
}

/**
 * HTML page delivery callback. Similar to drupal_deliver_html_page(), but uses
 * our custom html template and renders only the form (no regions).
 *
 * @see drupal_deliver_html_page()
 * @see formframe_menu()
 */
function formframe_deliver_html_page($callback_result = NULL) {
  // Content security policy! And fall-backs.
  if (variable_get('formframe_enforce_csp', FALSE) && $whitelist = variable_get('formframe_origin_whitelist', '')) {
    // Replace newlines with spaces.
    $wl = trim(str_replace("\n", ' ', $whitelist));

    // Provide CSP 1.0 header indicating allowed origins.
    drupal_add_http_header('Content-Security-Policy', 'frame-ancestors ' . $wl);

    // Provide CSP support for IE10 and 11...
    drupal_add_http_header('X-Content-Security-Policy', 'frame-ancestors ' . $wl);

    // Best attempt at securing IE8 and IE9. Unfortunately, x-frame-options only
    // allows a single origin, so we check for that here.
    if (count(explode("\n", $whitelist)) === 1) {
      drupal_add_http_header('X-Frame-Options', 'ALLOW-FRAME ' . $wl);
    }
  }

  // If we received a response and we know how to deal with it, deal with it.
  if (isset($callback_result) && !is_int($callback_result)) {
    if (is_null(drupal_get_http_header('Content-Type'))) {
      drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
    }

    // Send appropriate HTTP-Header for browsers and search engines.
    drupal_add_http_header('Content-Language', $GLOBALS['language']->language);

    // Prevent search indexing via X-Robots-Tag HTTP header.
    drupal_add_http_header('X-Robots-Tag', 'noindex');

    // Print anything besides a menu constant, assuming it's not NULL or
    // undefined. Allow other modules to do one last alter.
    $config = formframe_get_form(arg(2));
    formframe_apply_configs($callback_result, $config);
    drupal_alter('formframe_prerender', $callback_result);
    $page = formframe_render_page($callback_result);
    print theme('formframe', array('form' => $page));

    // Perform end-of-request tasks.
    drupal_page_footer();
  }
  // Otherwise, hand-off to the standard delivery callback.
  else {
    drupal_deliver_html_page($callback_result);
  }
}

/**
 * Form frame page render callback. Similar to drupal_render_page(), but only
 * returns the contents of the main system content region.
 *
 * @see drupal_render_page()
 * @see formframe_deliver_html_page()
 */
function formframe_render_page($page) {
  drupal_set_page_content($page);
  $page = element_info('page');

  // Go through the normal page rendering motions, but separately. This ensures
  // that any global-scope CSS/JS that this form might rely on is included too.
  $page_copy = $page;
  foreach (module_implements('page_build') as $module) {
    $function = $module . '_page_build';
    $function($page_copy);
  }
  drupal_alter('page', $page_copy);
  drupal_render($page_copy);

  // Ultimately, just return the rendered version of the main content area.
  $page['content']['system_main'] = drupal_set_page_content();
  return drupal_render($page['content']['system_main']);
}

/**
 * Implements hook_form_alter().
 */
function formframe_form_alter(&$form, &$form_state, $form_id) {
  // Check that this is a formframe-built form.
  if (isset($form_state['build_info']['formframe'])) {
    $path = drupal_get_path('module', 'formframe');

    // Add submit handler to handle redirects.
    $form['#submit'][] = 'formframe_submit_handler';

    // Add script to automatically target all links to parent.
    $form['#attached']['js'][] = $path . '/js/target-parent.js';

    // Add script to enable communication with the parent.
    $form['#attached']['library'][] = array('formframe', 'framecomm');
    $form['#attached']['js'][] = array(
      'type' => 'file',
      'data' => $path . '/js/framecomm-init.js',
      'group' => JS_LIBRARY,
    );
    $form['#attached']['js'][] = array(
      'type' => 'setting',
      'data' => array(
        'formframe' => array(
          'whitelist' => explode("\n", variable_get('formframe_origin_whitelist', '')),
        ),
      ),
    );

    // Add some inline CSS via query params.
    $form['#attached']['css']['formframe_css_overrides'] = array(
      'data' => formframe_get_css_overrides(),
      'type' => 'inline',
      'weight' => 1000,
      'group' => CSS_THEME,
      'preprocess' => FALSE,
    );
  }
  // If not, we may want to attach contextual links to generate an embed code.
  else {
    if ($forms = formframe_get_forms_by_drupal_form($form_id)) {
      // For simplicity, just use the first. The embed code page will allow the
      // user to pick which specific form frame configuration to use.
      $config = reset($forms);
      $form['#contextual_links']['formframe'] = array(
        'admin/structure/form-frames/embed',
        array($config->path),
      );
    }
  }
}

/**
 * Submit handler ensures that the provided redirect configuration sticks.
 */
function formframe_submit_handler($form, &$form_state) {
  $config = $form_state['build_info']['formframe'];

  if (isset($config->data['redirect']) && !empty($config->data['redirect'])) {
    $form_state['redirect'] = url($config->data['redirect'], array(
      'absolute' => TRUE,
      'external' => FALSE,
    ));
  }
}

/**
 * Template preprocessor for the main formframe chrome.
 */
function template_preprocess_formframe(&$vars) {
  // Take care of all things usually taken care of by core for a page view.
  $vars['styles'] = drupal_get_css();
  $vars['scripts'] = drupal_get_js();
  $vars['head'] = drupal_get_html_head();
  $vars['head_title'] = drupal_get_title();
  $vars['language'] = $GLOBALS['language'];
  $vars['language']->dir = $GLOBALS['language']->direction ? 'rtl' : 'ltr';
  $vars['rdf_namespaces'] = drupal_get_rdf_namespaces();
  $vars['grddl_profile'] = 'http://www.w3.org/1999/xhtml/vocab';
}

/**
 * Applies the provided configurations against a given form.
 * @param array $form
 * @param array $config
 */
function formframe_apply_configs(&$form, $config) {
  if (isset($config->data['target']) && !empty($config->data['target'])) {
    $form['#attributes']['target'] = $config->data['target'];
  }
}

/**
 * Returns all currently known form frame configurations.
 *
 * @param bool $reset
 *   (Optional) Whether or not the form frame configuration static cache should
 *   be reset when loading configs.
 *
 * @return array
 *   An array of form frame configuration objects.
 */
function formframe_get_forms($reset = FALSE) {
  $definitions = &drupal_static(__FUNCTION__, array());

  if ($definitions === array() || $reset) {
    ctools_include('export');
    ctools_export_load_object_reset('formframes');
    $definitions = ctools_export_load_object('formframes', 'all');
  }

  return $definitions;
}

/**
 * Returns an individual form frame configuration by a given path part key.
 *
 * @param string $form
 *   The form frame configuration key (URL path part).
 *
 * @return object|bool
 *   The individual form frame configuration object, FALSE otherwise.
 */
function formframe_get_form($form) {
  $definitions = formframe_get_forms();
  return isset($definitions[$form]) ? $definitions[$form] : FALSE;
}

/**
 * Returns form frame configurations by a given Drupal form name.
 *
 * @param string $form_id
 *   The desired Drupal form name / form ID.
 *
 * @return array
 *   An array of form frame configurations for the given Drupal form.
 */
function formframe_get_forms_by_drupal_form($form_id) {
  $results = array();

  foreach (formframe_get_forms() as $id => $config) {
    if ($config->form === $form_id) {
      $results[$id] = $config;
    }
  }

  return $results;
}

/**
 * Returns form frame parameter configurations, optionally filtered by type.
 *
 * @param string $type
 *   (Optional) Filters the results to parameter configurations of a given type.
 *
 * @return array
 *   An associative array of form frame parameter configurations, keyed by
 *   parameter name, and optionally filtered by $type.
 */
function formframe_parameters($type = '*') {
  $return = &drupal_static(__FUNCTION__, array());

  if (!isset($return[$type])) {
    // Load all into static cache if they haven't already.
    if (!isset($return['*'])) {
      // Load and alter form frame parameter configurations.
      $parameters = module_invoke_all('formframe_parameters');
      drupal_alter('formframe_parameters', $parameters);
      $return['*'] = $parameters;
    }

    // Filter parameter configurations by the given type.
    if ($type !== '*') {
      $return[$type] = array();
      foreach ($return['*'] as $parameter => $config) {
        if ($config['type'] === $type) {
          $return[$type][$parameter] = $config;
        }
      }
    }
  }

  return $return[$type];
}

/**
 * Returns safe form frame parameter values from the global page request ($_GET)
 * keyed by the names of the form frame parameter (as opposed to the name of the
 * query parameter).
 *
 * @param string $type
 *   (Optional) Use this to filter down to specific form frame parameter types.
 *
 * @return array
 *   Returns an associative array where the key is the form frame parameter name
 *   (e.g. the keys returned in hook_formframe_parameters()) and the value is
 *   the sanitized value of the query parameter, run through the provided filter
 *   callback (or check_plain by default).
 */
function formframe_parameter_values($type = '*') {
  $values = &drupal_static(__FUNCTION__, array());

  if (!isset($values[$type])) {
    $values[$type] = array();

    // Iterate through defined parameter definitions for this type.
    $parameters = formframe_parameters($type);
    foreach ($parameters as $name => $config) {
      // Normalize the query parameter we're searching for.
      $param = isset($config['query']) ? $config['query'] : $name;

      // Normalize the filter callback we'll be applying.
      $callback = 'check_plain';
      if (isset($config['filter']) && function_exists($config['filter'])) {
        $callback = $config['filter'];
      }

      // If the value is set, run it through the filter and prepare a response.
      if (isset($_GET[$param])) {
        $values[$type][$name] = $callback($_GET[$param]);
      }
    }
  }

  return $values[$type];
}

/**
 * Returns a (safe) string of CSS properties, useful for altering the basic
 * display of a form.
 *
 * @return string
 *   A string of CSS representing the style changes desired.
 */
function formframe_get_css_overrides() {
  $parameters = formframe_parameters('css_override');
  $values = formframe_parameter_values('css_override');
  $styles = array();

  foreach ($values as $param => $value) {
    $css = $parameters[$param];

    // Only account for non-empty CSS styles.
    if (!empty($value)) {
      $value = $css['style'] . ':' . $value . ' !important;';

      if (isset($styles[$css['selector']])) {
        $styles[$css['selector']] .= $value;
      }
      else {
        $styles[$css['selector']] = $value;
      }
    }
  }

  $css_response = '';
  foreach ($styles as $selector => $style) {
    $css_response .= $selector . '{' . $style . "}\n";
  }
  return $css_response;
}

/**
 * Export callback for form frame exportables.
 */
function formframe_export_formframes($context, $indent = '') {
  $output = ctools_export_object('formframes', $context, $indent);
  $translatables = array();
  foreach (array('title') as $key) {
    if (!empty($context->{$key})) {
      $translatables[] = $context->{$key};
    }
  }
  $translatables = array_filter(array_unique($translatables));
  if (!empty($translatables)) {
    $output .= "\n";
    $output .= "{$indent}// Translatables included for use with string extractors like potx.\n";
    sort($translatables);
    foreach ($translatables as $string) {
      $output .= "{$indent}t(" . ctools_var_export($string) . ");\n";
    }
  }
  return $output;
}

/**
 * Save callback for form frame exportables.
 */
function formframe_save_formframes($object) {
  if ($object->export_type & EXPORT_IN_DATABASE) {
    // Existing record.
    $update = array('pid');
  }
  else {
    // New record.
    $update = array();
    $object->export_type = EXPORT_IN_DATABASE;
  }
  $return = drupal_write_record('formframes', $object, $update);

  // Always rebuild the menu when saving a form frames.
  variable_set('menu_rebuild_needed', TRUE);

  return $return;
}

/**
 * Status set callback for form frame exportables.
 */
function formframe_set_status_formframes($object, $status) {
  ctools_export_set_object_status($object, $status);

  // Always rebuild the menu when updating the status of a form frame.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Delete callback for form frame exportables.
 */
function formframe_delete_formframes($object) {
  // If we were sent an object, get the export key from it. Otherwise
  // assume we were sent the export key.
  $value = is_object($object) ? $object->pid : $object;
  db_delete('formframes')
    ->condition('pid', $value)
    ->execute();

  // Always rebuild the menu when deleting a search collection.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Redirects users to the form frame embed code page.
 */
function formframe_redirect_to_embed_page($name) {
  // Account for destination.
  $options = array();
  if (isset($_GET['destination'])) {
    $options['query']['destination'] = $_GET['destination'];
    unset($_GET['destination']);
  }

  drupal_goto('admin/structure/form-frames/list/' . $name . '/embed', $options);
}
